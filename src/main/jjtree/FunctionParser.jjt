options {
    STATIC = false;
    UNICODE_INPUT=true;
}

PARSER_BEGIN(FunctionParser)

package com.github.vincentrussell.json.datagenerator.parser;

import java.util.List;
import java.util.ArrayList;
import com.github.vincentrussell.json.datagenerator.functions.FunctionRegistry;
import com.google.common.base.Charsets;
import java.lang.reflect.InvocationTargetException;
import java.lang.IllegalAccessException;

/** An Arithmetic Grammar. */
public class FunctionParser {

  private FunctionRegistry functionRegistry;

  public void setFunctionRegistry(final FunctionRegistry functionRegistry) {
    this.functionRegistry = functionRegistry;
  }

  /** Main entry point. */
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    FunctionParser t = new FunctionParser(System.in, Charsets.UTF_8);
    try {
      SimpleNode n = t.Start();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(FunctionParser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

/* TOKENS */
TOKEN : {
	  < DOUBLE_QUOTED_STRING_LITERAL:
          "\""
          (   (~["\"","\\","\n","\r"])
            | ("\\"
                ( ["n","t","b","r","f","\\","'","\""]
                | ["0"-"7"] ( ["0"-"7"] )?
                | ["0"-"3"] ["0"-"7"] ["0"-"7"]
                )
              )
          )*
          "\""
      >
    | < SINGLE_QUOTED_STRING_LITERAL:
            "'"
            (   (~["'","\\","\n","\r"])
              | ("\\"
                  ( ["n","t","b","r","f","\\","\""]
                  | ["0"-"7"] ( ["0"-"7"] )?
                  | ["0"-"3"] ["0"-"7"] ["0"-"7"]
                  )
                )
            )*
            "'"
      >
	| < NUMBER: <INTEGER> (["L"])? | <FLOATING_POINT_LITERAL>  >
	| < FLOATING_POINT_LITERAL:
             ("-")? (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
            | ("-")? "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
            | ("-")? (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
            | ("-")? (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
        >
    | < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
	| < INTEGER: "0" | ("-")? ["1" - "9"] (["0" - "9"])*>
	| < DIGIT: ["0"-"9"] >
	| < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
    | < TERM: <LETTER> (<LETTER>|<DIGIT>)* >
	| < LETTER: ["_","-","a"-"z","A"-"Z"] >
}


/** Main production. */
SimpleNode Start() throws InvocationTargetException, IllegalAccessException : {}
{
  Function() <EOF>
  { return jjtThis; }
}

String FunctionName() : {Token t=null;}
{
    t=<IDENTIFIER> {
        return t.image;
    }
}

String DoubleQuotedStringLiteral() : {Token t=null;}
{
    t=<DOUBLE_QUOTED_STRING_LITERAL> {
        return t.image.replaceAll("^\"|\"$", "");
    }
}

String SingleQuotedStringLiteral() : {Token t=null;}
{
    t=<SINGLE_QUOTED_STRING_LITERAL> {
        return t.image.replaceAll("^'|'$", "");
    }
}

String Number() : {Token t=null;}
{
    t=<NUMBER> {
        final String value = t.image;
        jjtThis.jjtSetValue(value);
        return value;
    }
}

void Function() throws InvocationTargetException, IllegalAccessException :
{}
{
  FunctionName() FormalParameters()
}

String Parse() throws InvocationTargetException, IllegalAccessException : {
    String functionName = null;
    String[] parameters = null;
}
{
    (functionName=FunctionName()) (parameters=FormalParameters()) {
        return functionRegistry.executeFunction(functionName,parameters.length == 0 ? null : parameters);
    }
}

String[] FormalParameters() throws InvocationTargetException, IllegalAccessException :
{
        String parameter;
		List<String> parameters = new ArrayList<String>();
}
{
  "(" [ (parameter=FormalParameter()) { parameters.add(parameter); } ( "," (parameter=FormalParameter()) { parameters.add(parameter); } )* ] ")"
  { return parameters.toArray(new String[parameters.size()]);}
}

String FormalParameter() throws InvocationTargetException, IllegalAccessException :
{String t=null;}
{
  ( t=DoubleQuotedStringLiteral() | t=SingleQuotedStringLiteral() | t=Number() | t=Parse() ) {
        return t;
  }
}
